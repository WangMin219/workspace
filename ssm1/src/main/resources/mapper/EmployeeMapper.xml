<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wh.dao.EmployeeMapper">
  <resultMap id="BaseResultMap" type="com.wh.bean.Employee">
    <id column="EMPLOYEE_ID" jdbcType="INTEGER" property="employeeId" />
    <result column="EMPLOYEE_NAME" jdbcType="VARCHAR" property="employeeName" />
    <result column="DEPARTMENT_ID" jdbcType="INTEGER" property="departmentId" />
    <result column="POSITON_ID" jdbcType="INTEGER" property="positonId" />
    <result column="PHONE" jdbcType="VARCHAR" property="phone" />
    <result column="EMAIL" jdbcType="VARCHAR" property="email" />
    <result column="STATUS" jdbcType="VARCHAR" property="status" />
    <result column="PARENT_EMPLOYEE_ID" jdbcType="INTEGER" property="parentEmployeeId" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    EMPLOYEE_ID, EMPLOYEE_NAME, DEPARTMENT_ID, POSITON_ID, PHONE, EMAIL, STATUS, PARENT_EMPLOYEE_ID, 
    CREATE_TIME, UPDATE_TIME
  </sql>
  
  <!-- 获取父级菜单 -->
  <select id="getJurisdiction_Pare" resultType="com.wh.bean.Menu">
    SELECT
	menu.MENU_ID,
	menu.MENU_NAME,
	menu.MENU_URL,
	menu.PICTURES
	FROM
	employee
	INNER JOIN emm_position ON employee.POSITON_ID = emm_position.POSITION_ID
	INNER JOIN position_menu_relations ON emm_position.POSITION_ID = position_menu_relations.POSITION_ID
	INNER JOIN menu ON position_menu_relations.MENU_ID = menu.MENU_ID
	WHERE
	employee.EMPLOYEE_ID = #{id} AND
	menu.PARENT_MENU_ID IS NULL;
  </select>
  
  <!-- 获取子级菜单 -->
   <select id="getJurisdiction_Son" resultType="com.wh.bean.Menu">
    SELECT
	menu.MENU_ID,
	menu.MENU_NAME,
	menu.PARENT_MENU_ID,
	menu.MENU_URL
	FROM
	employee
	INNER JOIN emm_position ON employee.POSITON_ID = emm_position.POSITION_ID
	INNER JOIN position_menu_relations ON emm_position.POSITION_ID = position_menu_relations.POSITION_ID
	INNER JOIN menu ON position_menu_relations.MENU_ID = menu.MENU_ID
	WHERE
	employee.EMPLOYEE_ID = #{id} AND
	menu.PARENT_MENU_ID IS NOT NULL;
  </select>
  
  <!-- 查询所有得用户信息 -->
  <select id="getAllEmployee" resultType="com.wh.vo.Employee_department">
  	SELECT
	employee.UPDATE_TIME,
	employee.CREATE_TIME,
	employee.EMPLOYEE_ID,
	employee.EMPLOYEE_NAME,
	department.DEPARTMENT_NAME,
	employee.PHONE,
	employee.EMAIL,
	employee.POSITON_ID,
	employee.DEPARTMENT_ID,
	employee.`STATUS`,
	emm_position.POSITION_NAME
	FROM
	employee
	INNER JOIN department ON employee.DEPARTMENT_ID = department.DEPARTMENT_ID
	INNER JOIN emm_position ON employee.POSITON_ID = emm_position.POSITION_ID
	WHERE
	employee.DEPARTMENT_ID = department.DEPARTMENT_ID
  </select>
  
  <select id="getAllEmployeeByName_Phone" parameterType="com.wh.vo.Employee_department" resultType="com.wh.vo.Employee_department">
  	SELECT
	employee.UPDATE_TIME,
	employee.CREATE_TIME,
	employee.EMPLOYEE_ID,
	employee.EMPLOYEE_NAME,
	department.DEPARTMENT_NAME,
	employee.PHONE,
	employee.EMAIL,
	employee.POSITON_ID,
	employee.DEPARTMENT_ID,
	employee.`STATUS`,
	emm_position.POSITION_NAME
	FROM
	employee
	INNER JOIN department ON employee.DEPARTMENT_ID = department.DEPARTMENT_ID
	INNER JOIN emm_position ON employee.POSITON_ID = emm_position.POSITION_ID
	WHERE
	employee.DEPARTMENT_ID = department.DEPARTMENT_ID
	<if test="employeeId != null">AND EMPLOYEE_ID LIKE CONCAT('%',#{employeeId},'%')</if>
	<if test="employeeName != null"> AND EMPLOYEE_NAME LIKE CONCAT('%',#{employeeName},'%')</if>
  </select>
  
  <select id="getEmpById" parameterType="java.lang.Integer" resultType="com.wh.vo.Employee_department">
    SELECT
	employee.UPDATE_TIME,
	employee.CREATE_TIME,
	employee.EMPLOYEE_ID,
	employee.EMPLOYEE_NAME,
	department.DEPARTMENT_NAME,
	employee.PHONE,
	employee.EMAIL,
	employee.POSITON_ID,
	employee.DEPARTMENT_ID,
	employee.`STATUS`,
	employee.PARENT_EMPLOYEE_ID,
	emm_position.POSITION_NAME
	FROM
	employee
	INNER JOIN department ON employee.DEPARTMENT_ID = department.DEPARTMENT_ID
	INNER JOIN emm_position ON employee.POSITON_ID = emm_position.POSITION_ID
	WHERE
	employee.DEPARTMENT_ID = department.DEPARTMENT_ID
  	AND employee.EMPLOYEE_ID = #{employeeId}
  </select>
  
  <!-- 修改Emp信息 -->
  <update id="updateEmp" parameterType="com.wh.bean.Employee">
	update employee set
	EMPLOYEE_NAME = #{employeeName},DEPARTMENT_ID = #{departmentId},POSITON_ID =
	#{positonId},PHONE = #{phone},EMAIL = #{email},PARENT_EMPLOYEE_ID =
	#{parentEmployeeId}
	where
	EMPLOYEE_ID = #{employeeId}
  </update>
  
  <!-- 修改状态 -->
  <update id="updateEmployeeStatus">
  	UPDATE employee SET `STATUS` = #{arg1} WHERE EMPLOYEE_ID = #{arg0}
  </update>
  
  <select id="selectByExample" parameterType="com.wh.bean.EmployeeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from employee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from employee
    where EMPLOYEE_ID = #{employeeId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from employee
    where EMPLOYEE_ID = #{employeeId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.wh.bean.EmployeeExample">
    delete from employee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.wh.bean.Employee">
    insert into employee (EMPLOYEE_ID, EMPLOYEE_NAME, DEPARTMENT_ID, 
      POSITON_ID, PHONE, EMAIL, 
      STATUS, PARENT_EMPLOYEE_ID, CREATE_TIME, 
      UPDATE_TIME)
    values (#{employeeId,jdbcType=INTEGER}, #{employeeName,jdbcType=VARCHAR}, #{departmentId,jdbcType=INTEGER}, 
      #{positonId,jdbcType=INTEGER}, #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{status,jdbcType=VARCHAR}, #{parentEmployeeId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.wh.bean.Employee">
    insert into employee
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="employeeId != null">
        EMPLOYEE_ID,
      </if>
      <if test="employeeName != null">
        EMPLOYEE_NAME,
      </if>
      <if test="departmentId != null">
        DEPARTMENT_ID,
      </if>
      <if test="positonId != null">
        POSITON_ID,
      </if>
      <if test="phone != null">
        PHONE,
      </if>
      <if test="email != null">
        EMAIL,
      </if>
      <if test="status != null">
        STATUS,
      </if>
      <if test="parentEmployeeId != null">
        PARENT_EMPLOYEE_ID,
      </if>
      <if test="createTime != null">
        CREATE_TIME,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="employeeId != null">
        #{employeeId,jdbcType=INTEGER},
      </if>
      <if test="employeeName != null">
        #{employeeName,jdbcType=VARCHAR},
      </if>
      <if test="departmentId != null">
        #{departmentId,jdbcType=INTEGER},
      </if>
      <if test="positonId != null">
        #{positonId,jdbcType=INTEGER},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="parentEmployeeId != null">
        #{parentEmployeeId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.wh.bean.EmployeeExample" resultType="java.lang.Long">
    select count(*) from employee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update employee
    <set>
      <if test="record.employeeId != null">
        EMPLOYEE_ID = #{record.employeeId,jdbcType=INTEGER},
      </if>
      <if test="record.employeeName != null">
        EMPLOYEE_NAME = #{record.employeeName,jdbcType=VARCHAR},
      </if>
      <if test="record.departmentId != null">
        DEPARTMENT_ID = #{record.departmentId,jdbcType=INTEGER},
      </if>
      <if test="record.positonId != null">
        POSITON_ID = #{record.positonId,jdbcType=INTEGER},
      </if>
      <if test="record.phone != null">
        PHONE = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        EMAIL = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        STATUS = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.parentEmployeeId != null">
        PARENT_EMPLOYEE_ID = #{record.parentEmployeeId,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update employee
    set EMPLOYEE_ID = #{record.employeeId,jdbcType=INTEGER},
      EMPLOYEE_NAME = #{record.employeeName,jdbcType=VARCHAR},
      DEPARTMENT_ID = #{record.departmentId,jdbcType=INTEGER},
      POSITON_ID = #{record.positonId,jdbcType=INTEGER},
      PHONE = #{record.phone,jdbcType=VARCHAR},
      EMAIL = #{record.email,jdbcType=VARCHAR},
      STATUS = #{record.status,jdbcType=VARCHAR},
      PARENT_EMPLOYEE_ID = #{record.parentEmployeeId,jdbcType=INTEGER},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.wh.bean.Employee">
    update employee
    <set>
      <if test="employeeName != null">
        EMPLOYEE_NAME = #{employeeName,jdbcType=VARCHAR},
      </if>
      <if test="departmentId != null">
        DEPARTMENT_ID = #{departmentId,jdbcType=INTEGER},
      </if>
      <if test="positonId != null">
        POSITON_ID = #{positonId,jdbcType=INTEGER},
      </if>
      <if test="phone != null">
        PHONE = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        EMAIL = #{email,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        STATUS = #{status,jdbcType=VARCHAR},
      </if>
      <if test="parentEmployeeId != null">
        PARENT_EMPLOYEE_ID = #{parentEmployeeId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where EMPLOYEE_ID = #{employeeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.wh.bean.Employee">
    update employee
    set EMPLOYEE_NAME = #{employeeName,jdbcType=VARCHAR},
      DEPARTMENT_ID = #{departmentId,jdbcType=INTEGER},
      POSITON_ID = #{positonId,jdbcType=INTEGER},
      PHONE = #{phone,jdbcType=VARCHAR},
      EMAIL = #{email,jdbcType=VARCHAR},
      STATUS = #{status,jdbcType=VARCHAR},
      PARENT_EMPLOYEE_ID = #{parentEmployeeId,jdbcType=INTEGER},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP}
    where EMPLOYEE_ID = #{employeeId,jdbcType=INTEGER}
  </update>
</mapper>